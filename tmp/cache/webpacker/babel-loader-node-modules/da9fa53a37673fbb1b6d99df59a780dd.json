{"ast":null,"code":"/*!\n * Client Side Validations JS - v0.1.4 (https://github.com/DavyJonesLocker/client_side_validations)\n * Copyright (c) 2020 Geremia Taglialatela, Brian Cardarella\n * Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n */\nimport $ from 'jquery';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar ClientSideValidations = {\n  callbacks: {\n    element: {\n      after: function after(element, eventData) {},\n      before: function before(element, eventData) {},\n      fail: function fail(element, message, addError, eventData) {\n        return addError();\n      },\n      pass: function pass(element, removeError, eventData) {\n        return removeError();\n      }\n    },\n    form: {\n      after: function after(form, eventData) {},\n      before: function before(form, eventData) {},\n      fail: function fail(form, eventData) {},\n      pass: function pass(form, eventData) {}\n    }\n  },\n  eventsToBind: {\n    form: function form(_form, $form) {\n      return {\n        'submit.ClientSideValidations': function submitClientSideValidations(eventData) {\n          if (!$form.isValid(_form.ClientSideValidations.settings.validators)) {\n            eventData.preventDefault();\n            eventData.stopImmediatePropagation();\n          }\n        },\n        'ajax:beforeSend.ClientSideValidations': function ajaxBeforeSendClientSideValidations(eventData) {\n          if (eventData.target === this) {\n            $form.isValid(_form.ClientSideValidations.settings.validators);\n          }\n        },\n        'form:validate:after.ClientSideValidations': function formValidateAfterClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.form.after($form, eventData);\n        },\n        'form:validate:before.ClientSideValidations': function formValidateBeforeClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.form.before($form, eventData);\n        },\n        'form:validate:fail.ClientSideValidations': function formValidateFailClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.form.fail($form, eventData);\n        },\n        'form:validate:pass.ClientSideValidations': function formValidatePassClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.form.pass($form, eventData);\n        }\n      };\n    },\n    input: function input(form) {\n      return {\n        'focusout.ClientSideValidations': function focusoutClientSideValidations() {\n          $(this).isValid(form.ClientSideValidations.settings.validators);\n        },\n        'change.ClientSideValidations': function changeClientSideValidations() {\n          $(this).data('changed', true);\n        },\n        'element:validate:after.ClientSideValidations': function elementValidateAfterClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.element.after($(this), eventData);\n        },\n        'element:validate:before.ClientSideValidations': function elementValidateBeforeClientSideValidations(eventData) {\n          ClientSideValidations.callbacks.element.before($(this), eventData);\n        },\n        'element:validate:fail.ClientSideValidations': function elementValidateFailClientSideValidations(eventData, message) {\n          var $element = $(this);\n          ClientSideValidations.callbacks.element.fail($element, message, function () {\n            return form.ClientSideValidations.addError($element, message);\n          }, eventData);\n        },\n        'element:validate:pass.ClientSideValidations': function elementValidatePassClientSideValidations(eventData) {\n          var $element = $(this);\n          ClientSideValidations.callbacks.element.pass($element, function () {\n            return form.ClientSideValidations.removeError($element);\n          }, eventData);\n        }\n      };\n    },\n    inputConfirmation: function inputConfirmation(element, form) {\n      return {\n        'focusout.ClientSideValidations': function focusoutClientSideValidations() {\n          element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);\n        },\n        'keyup.ClientSideValidations': function keyupClientSideValidations() {\n          element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);\n        }\n      };\n    }\n  },\n  enablers: {\n    form: function form(_form2) {\n      var $form = $(_form2);\n      _form2.ClientSideValidations = {\n        settings: $form.data('clientSideValidations'),\n        addError: function addError(element, message) {\n          return ClientSideValidations.formBuilders[_form2.ClientSideValidations.settings.html_settings.type].add(element, _form2.ClientSideValidations.settings.html_settings, message);\n        },\n        removeError: function removeError(element) {\n          return ClientSideValidations.formBuilders[_form2.ClientSideValidations.settings.html_settings.type].remove(element, _form2.ClientSideValidations.settings.html_settings);\n        }\n      };\n      var eventsToBind = ClientSideValidations.eventsToBind.form(_form2, $form);\n\n      for (var eventName in eventsToBind) {\n        var eventFunction = eventsToBind[eventName];\n        $form.on(eventName, eventFunction);\n      }\n\n      $form.find(ClientSideValidations.selectors.inputs).each(function () {\n        ClientSideValidations.enablers.input(this);\n      });\n    },\n    input: function input(_input) {\n      var $input = $(_input);\n      var form = _input.form;\n      var $form = $(form);\n      var eventsToBind = ClientSideValidations.eventsToBind.input(form);\n\n      for (var eventName in eventsToBind) {\n        var eventFunction = eventsToBind[eventName];\n        $input.filter(':not(:radio):not([id$=_confirmation])').each(function () {\n          return $(this).attr('data-validate', true);\n        }).on(eventName, eventFunction);\n      }\n\n      $input.filter(':checkbox').on('change.ClientSideValidations', function () {\n        $(this).isValid(form.ClientSideValidations.settings.validators);\n      });\n      $input.filter('[id$=_confirmation]').each(function () {\n        var $element = $(this);\n        var $elementToConfirm = $form.find('#' + this.id.match(/(.+)_confirmation/)[1] + ':input');\n\n        if ($elementToConfirm.length) {\n          var _eventsToBind = ClientSideValidations.eventsToBind.inputConfirmation($elementToConfirm, form);\n\n          for (var _eventName in _eventsToBind) {\n            var _eventFunction = _eventsToBind[_eventName];\n            $('#' + $element.attr('id')).on(_eventName, _eventFunction);\n          }\n        }\n      });\n    }\n  },\n  formBuilders: {\n    'ActionView::Helpers::FormBuilder': {\n      add: function add(element, settings, message) {\n        var form = $(element[0].form);\n\n        if (element.data('valid') !== false && form.find(\"label.message[for='\" + element.attr('id') + \"']\")[0] == null) {\n          var inputErrorField = $(settings.input_tag);\n          var labelErrorField = $(settings.label_tag);\n          var label = form.find(\"label[for='\" + element.attr('id') + \"']:not(.message)\");\n\n          if (element.attr('autofocus')) {\n            element.attr('autofocus', false);\n          }\n\n          element.before(inputErrorField);\n          inputErrorField.find('span#input_tag').replaceWith(element);\n          inputErrorField.find('label.message').attr('for', element.attr('id'));\n          labelErrorField.find('label.message').attr('for', element.attr('id'));\n          labelErrorField.insertAfter(label);\n          labelErrorField.find('label#label_tag').replaceWith(label);\n        }\n\n        form.find(\"label.message[for='\" + element.attr('id') + \"']\").text(message);\n      },\n      remove: function remove(element, settings) {\n        var form = $(element[0].form);\n        var inputErrorFieldClass = $(settings.input_tag).attr('class');\n        var inputErrorField = element.closest('.' + inputErrorFieldClass.replace(/ /g, '.'));\n        var label = form.find(\"label[for='\" + element.attr('id') + \"']:not(.message)\");\n        var labelErrorFieldClass = $(settings.label_tag).attr('class');\n        var labelErrorField = label.closest('.' + labelErrorFieldClass.replace(/ /g, '.'));\n\n        if (inputErrorField[0]) {\n          inputErrorField.find('#' + element.attr('id')).detach();\n          inputErrorField.replaceWith(element);\n          label.detach();\n          labelErrorField.replaceWith(label);\n        }\n      }\n    }\n  },\n  patterns: {\n    numericality: {\n      \"default\": new RegExp('^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?$'),\n      only_integer: new RegExp('^[+-]?\\\\d+$')\n    }\n  },\n  selectors: {\n    inputs: ':input:not(button):not([type=\"submit\"])[name]:visible:enabled',\n    validate_inputs: ':input:enabled:visible[data-validate]',\n    forms: 'form[data-client-side-validations]'\n  },\n  validators: {\n    all: function all() {\n      return $.extend({}, ClientSideValidations.validators.local, ClientSideValidations.validators.remote);\n    },\n    local: {},\n    remote: {}\n  },\n  disable: function disable(target) {\n    var $target = $(target);\n    $target.off('.ClientSideValidations');\n\n    if ($target.is('form')) {\n      ClientSideValidations.disable($target.find(':input'));\n    } else {\n      $target.removeData(['changed', 'valid']);\n      $target.filter(':input').each(function () {\n        $(this).removeAttr('data-validate');\n      });\n    }\n  },\n  reset: function reset(form) {\n    var $form = $(form);\n    ClientSideValidations.disable(form);\n\n    for (var key in form.ClientSideValidations.settings.validators) {\n      form.ClientSideValidations.removeError($form.find(\"[name='\" + key + \"']\"));\n    }\n\n    ClientSideValidations.enablers.form(form);\n  },\n  start: function start() {\n    if (window.Turbolinks != null && window.Turbolinks.supported) {\n      var initializeOnEvent = window.Turbolinks.EVENTS != null ? 'page:change' : 'turbolinks:load';\n      $(document).on(initializeOnEvent, function () {\n        return $(ClientSideValidations.selectors.forms).validate();\n      });\n    } else {\n      $(function () {\n        return $(ClientSideValidations.selectors.forms).validate();\n      });\n    }\n  }\n};\n\nvar arrayHasValue = function arrayHasValue(value, otherValues) {\n  for (var i = 0, l = otherValues.length; i < l; i++) {\n    if (value === otherValues[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar valueIsPresent = function valueIsPresent(value) {\n  return !/^\\s*$/.test(value || '');\n};\n\nvar absenceLocalValidator = function absenceLocalValidator(element, options) {\n  if (valueIsPresent(element.val())) {\n    return options.message;\n  }\n};\n\nvar presenceLocalValidator = function presenceLocalValidator(element, options) {\n  if (!valueIsPresent(element.val())) {\n    return options.message;\n  }\n};\n\nvar DEFAULT_ACCEPT_OPTION = ['1', true];\nArray.isArray || (Array.isArray = function (a) {\n  var object = {};\n  return '' + a !== a && object.toString.call(a) === '[object Array]';\n});\n\nvar isTextAccepted = function isTextAccepted(value, acceptOption) {\n  if (!acceptOption) {\n    acceptOption = DEFAULT_ACCEPT_OPTION;\n  }\n\n  if (Array.isArray(acceptOption)) {\n    return arrayHasValue(value, acceptOption);\n  }\n\n  return value === acceptOption;\n};\n\nvar acceptanceLocalValidator = function acceptanceLocalValidator(element, options) {\n  var valid = true;\n\n  if (element.attr('type') === 'checkbox') {\n    valid = element.prop('checked');\n  }\n\n  if (element.attr('type') === 'text') {\n    valid = isTextAccepted(element.val(), options.accept);\n  }\n\n  if (!valid) {\n    return options.message;\n  }\n};\n\nvar isMatching = function isMatching(value, regExpOptions) {\n  return new RegExp(regExpOptions.source, regExpOptions.options).test(value);\n};\n\nvar hasValidFormat = function hasValidFormat(value, withOptions, withoutOptions) {\n  return withOptions && isMatching(value, withOptions) || withoutOptions && !isMatching(value, withoutOptions);\n};\n\nvar formatLocalValidator = function formatLocalValidator(element, options) {\n  var value = element.val();\n\n  if (options.allow_blank && !valueIsPresent(value)) {\n    return;\n  }\n\n  if (!hasValidFormat(value, options[\"with\"], options.without)) {\n    return options.message;\n  }\n};\n\nvar VALIDATIONS = {\n  even: function even(a) {\n    return parseInt(a, 10) % 2 === 0;\n  },\n  greater_than: function greater_than(a, b) {\n    return parseFloat(a) > parseFloat(b);\n  },\n  greater_than_or_equal_to: function greater_than_or_equal_to(a, b) {\n    return parseFloat(a) >= parseFloat(b);\n  },\n  equal_to: function equal_to(a, b) {\n    return parseFloat(a) === parseFloat(b);\n  },\n  less_than: function less_than(a, b) {\n    return parseFloat(a) < parseFloat(b);\n  },\n  less_than_or_equal_to: function less_than_or_equal_to(a, b) {\n    return parseFloat(a) <= parseFloat(b);\n  },\n  odd: function odd(a) {\n    return parseInt(a, 10) % 2 === 1;\n  }\n};\n\nvar getOtherValue = function getOtherValue(validationOption, $form) {\n  if (!isNaN(parseFloat(validationOption))) {\n    return validationOption;\n  }\n\n  var validationElement = $form.find('[name*=' + validationOption + ']');\n\n  if (validationElement.length === 1) {\n    var numberFormat = $form[0].ClientSideValidations.settings.number_format;\n    var otherFormattedValue = $.trim(validationElement.val()).replace(new RegExp('\\\\' + numberFormat.separator, 'g'), '.');\n\n    if (!isNaN(parseFloat(otherFormattedValue))) {\n      return otherFormattedValue;\n    }\n  }\n};\n\nvar isValid = function isValid(validationFunction, validationOption, formattedValue, $form) {\n  if (validationFunction.length === 2) {\n    var otherValue = getOtherValue(validationOption, $form);\n    return otherValue == null || otherValue === '' || validationFunction(formattedValue, otherValue);\n  } else {\n    return validationFunction(formattedValue);\n  }\n};\n\nvar runFunctionValidations = function runFunctionValidations(formattedValue, $form, options) {\n  for (var validation in VALIDATIONS) {\n    var validationOption = options[validation];\n    var validationFunction = VALIDATIONS[validation]; // Must check for null because this could be 0\n\n    if (validationOption == null) {\n      continue;\n    }\n\n    if (!isValid(validationFunction, validationOption, formattedValue, $form)) {\n      return options.messages[validation];\n    }\n  }\n};\n\nvar runValidations = function runValidations(formattedValue, $form, options) {\n  if (options.only_integer && !ClientSideValidations.patterns.numericality.only_integer.test(formattedValue)) {\n    return options.messages.only_integer;\n  }\n\n  if (!ClientSideValidations.patterns.numericality[\"default\"].test(formattedValue)) {\n    return options.messages.numericality;\n  }\n\n  return runFunctionValidations(formattedValue, $form, options);\n};\n\nvar numericalityLocalValidator = function numericalityLocalValidator(element, options) {\n  var value = element.val();\n\n  if (options.allow_blank && !valueIsPresent(value)) {\n    return;\n  }\n\n  var $form = $(element[0].form);\n  var numberFormat = $form[0].ClientSideValidations.settings.number_format;\n  var formattedValue = $.trim(value).replace(new RegExp('\\\\' + numberFormat.separator, 'g'), '.');\n  return runValidations(formattedValue, $form, options);\n};\n\nvar VALIDATIONS$1 = {\n  is: function is(a, b) {\n    return a === parseInt(b, 10);\n  },\n  minimum: function minimum(a, b) {\n    return a >= parseInt(b, 10);\n  },\n  maximum: function maximum(a, b) {\n    return a <= parseInt(b, 10);\n  }\n};\n\nvar runValidations$1 = function runValidations(valueLength, options) {\n  for (var validation in VALIDATIONS$1) {\n    var validationOption = options[validation];\n    var validationFunction = VALIDATIONS$1[validation];\n\n    if (validationOption && !validationFunction(valueLength, validationOption)) {\n      return options.messages[validation];\n    }\n  }\n};\n\nvar lengthLocalValidator = function lengthLocalValidator(element, options) {\n  var value = element.val();\n\n  if (options.allow_blank && !valueIsPresent(value)) {\n    return;\n  }\n\n  return runValidations$1(value.length, options);\n};\n\nvar isInList = function isInList(value, otherValues) {\n  var normalizedOtherValues = [];\n\n  for (var otherValueIndex in otherValues) {\n    normalizedOtherValues.push(otherValues[otherValueIndex].toString());\n  }\n\n  return arrayHasValue(value, normalizedOtherValues);\n};\n\nvar isInRange = function isInRange(value, range) {\n  return value >= range[0] && value <= range[1];\n};\n\nvar isIncluded = function isIncluded(value, options, allowBlank) {\n  if ((options.allow_blank && !valueIsPresent(value)) === allowBlank) {\n    return true;\n  }\n\n  return options[\"in\"] && isInList(value, options[\"in\"]) || options.range && isInRange(value, options.range);\n};\n\nvar exclusionLocalValidator = function exclusionLocalValidator(element, options) {\n  var value = element.val();\n\n  if (isIncluded(value, options, false) || !options.allow_blank && !valueIsPresent(value)) {\n    return options.message;\n  }\n};\n\nvar inclusionLocalValidator = function inclusionLocalValidator(element, options) {\n  if (!isIncluded(element.val(), options, true)) {\n    return options.message;\n  }\n};\n\nvar confirmationLocalValidator = function confirmationLocalValidator(element, options) {\n  var value = element.val();\n  var confirmationValue = $('#' + element.attr('id') + '_confirmation').val();\n\n  if (!options.case_sensitive) {\n    value = value.toLowerCase();\n    confirmationValue = confirmationValue.toLowerCase();\n  }\n\n  if (value !== confirmationValue) {\n    return options.message;\n  }\n};\n\nvar isLocallyUnique = function isLocallyUnique(currentElement, value, otherValue, caseSensitive) {\n  if (!caseSensitive) {\n    value = value.toLowerCase();\n    otherValue = otherValue.toLowerCase();\n  }\n\n  if (otherValue === value) {\n    $(currentElement).data('notLocallyUnique', true);\n    return false;\n  }\n\n  if ($(currentElement).data('notLocallyUnique')) {\n    $(currentElement).removeData('notLocallyUnique').data('changed', true);\n  }\n\n  return true;\n};\n\nvar uniquenessLocalValidator = function uniquenessLocalValidator(element, options) {\n  var elementName = element.attr('name');\n  var matches = elementName.match(/^(.+_attributes\\])\\[\\d+\\](.+)$/);\n\n  if (!matches) {\n    return;\n  }\n\n  var form = element.closest('form');\n  var value = element.val();\n  var valid = true;\n  form.find(':input[name^=\"' + matches[1] + '\"][name$=\"' + matches[2] + '\"]').not(element).each(function () {\n    var otherValue = $(this).val();\n\n    if (!isLocallyUnique(this, value, otherValue, options.case_sensitive)) {\n      valid = false;\n    }\n  });\n\n  if (!valid) {\n    return options.message;\n  }\n};\n\nClientSideValidations.validators.local = {\n  absence: absenceLocalValidator,\n  presence: presenceLocalValidator,\n  acceptance: acceptanceLocalValidator,\n  format: formatLocalValidator,\n  numericality: numericalityLocalValidator,\n  length: lengthLocalValidator,\n  inclusion: inclusionLocalValidator,\n  exclusion: exclusionLocalValidator,\n  confirmation: confirmationLocalValidator,\n  uniqueness: uniquenessLocalValidator\n};\n\n$.fn.disableClientSideValidations = function () {\n  ClientSideValidations.disable(this);\n  return this;\n};\n\n$.fn.enableClientSideValidations = function () {\n  var _this = this;\n\n  var selectors = {\n    forms: 'form',\n    inputs: 'input'\n  };\n\n  var _loop = function _loop() {\n    var enablers = selectors[selector];\n\n    _this.filter(ClientSideValidations.selectors[selector]).each(function () {\n      return ClientSideValidations.enablers[enablers](this);\n    });\n  };\n\n  for (var selector in selectors) {\n    _loop();\n  }\n\n  return this;\n};\n\n$.fn.resetClientSideValidations = function () {\n  this.filter(ClientSideValidations.selectors.forms).each(function () {\n    return ClientSideValidations.reset(this);\n  });\n  return this;\n};\n\n$.fn.validate = function () {\n  this.filter(ClientSideValidations.selectors.forms).each(function () {\n    return $(this).enableClientSideValidations();\n  });\n  return this;\n};\n\n$.fn.isValid = function (validators) {\n  var obj = $(this[0]);\n\n  if (obj.is('form')) {\n    return validateForm(obj, validators);\n  } else {\n    return validateElement(obj, validatorsFor(this[0].name, validators));\n  }\n};\n\nvar cleanNestedElementName = function cleanNestedElementName(elementName, nestedMatches, validators) {\n  for (var validatorName in validators) {\n    if (validatorName.match('\\\\[' + nestedMatches[1] + '\\\\].*\\\\[\\\\]\\\\[' + nestedMatches[2] + '\\\\]$')) {\n      elementName = elementName.replace(/\\[[\\da-z_]+\\]\\[(\\w+)\\]$/g, '[][$1]');\n    }\n  }\n\n  return elementName;\n};\n\nvar cleanElementName = function cleanElementName(elementName, validators) {\n  elementName = elementName.replace(/\\[(\\w+_attributes)\\]\\[[\\da-z_]+\\](?=\\[(?:\\w+_attributes)\\])/g, '[$1][]');\n  var nestedMatches = elementName.match(/\\[(\\w+_attributes)\\].*\\[(\\w+)\\]$/);\n\n  if (nestedMatches) {\n    elementName = cleanNestedElementName(elementName, nestedMatches, validators);\n  }\n\n  return elementName;\n};\n\nvar validatorsFor = function validatorsFor(elementName, validators) {\n  if (Object.prototype.hasOwnProperty.call(validators, elementName)) {\n    return validators[elementName];\n  }\n\n  return validators[cleanElementName(elementName, validators)] || {};\n};\n\nvar validateForm = function validateForm(form, validators) {\n  var valid = true;\n  form.trigger('form:validate:before.ClientSideValidations');\n  form.find(ClientSideValidations.selectors.validate_inputs).each(function () {\n    if (!$(this).isValid(validators)) {\n      valid = false;\n    }\n\n    return true;\n  });\n\n  if (valid) {\n    form.trigger('form:validate:pass.ClientSideValidations');\n  } else {\n    form.trigger('form:validate:fail.ClientSideValidations');\n  }\n\n  form.trigger('form:validate:after.ClientSideValidations');\n  return valid;\n};\n\nvar passElement = function passElement(element) {\n  element.trigger('element:validate:pass.ClientSideValidations').data('valid', null);\n};\n\nvar failElement = function failElement(element, message) {\n  element.trigger('element:validate:fail.ClientSideValidations', message).data('valid', false);\n};\n\nvar afterValidate = function afterValidate(element) {\n  return element.trigger('element:validate:after.ClientSideValidations').data('valid') !== false;\n};\n\nvar executeValidator = function executeValidator(validatorFunctions, validatorFunction, validatorOptions, element) {\n  for (var validatorOption in validatorOptions) {\n    if (!validatorOptions[validatorOption]) {\n      continue;\n    }\n\n    var message = validatorFunction.call(validatorFunctions, element, validatorOptions[validatorOption]);\n\n    if (message) {\n      failElement(element, message);\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar executeValidators = function executeValidators(validatorFunctions, element, validators) {\n  for (var validator in validators) {\n    if (!validatorFunctions[validator]) {\n      continue;\n    }\n\n    if (!executeValidator(validatorFunctions, validatorFunctions[validator], validators[validator], element)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isMarkedForDestroy = function isMarkedForDestroy(element) {\n  if (element.attr('name').search(/\\[([^\\]]*?)\\]$/) >= 0) {\n    var destroyInputName = element.attr('name').replace(/\\[([^\\]]*?)\\]$/, '[_destroy]');\n\n    if ($(\"input[name='\" + destroyInputName + \"']\").val() === '1') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar executeAllValidators = function executeAllValidators(element, validators) {\n  if (element.data('changed') === false || element.prop('disabled')) {\n    return;\n  }\n\n  element.data('changed', false);\n\n  if (executeValidators(ClientSideValidations.validators.all(), element, validators)) {\n    passElement(element);\n  }\n};\n\nvar validateElement = function validateElement(element, validators) {\n  element.trigger('element:validate:before.ClientSideValidations');\n\n  if (isMarkedForDestroy(element)) {\n    passElement(element);\n  } else {\n    executeAllValidators(element, validators);\n  }\n\n  return afterValidate(element);\n};\n\nif (!window.ClientSideValidations) {\n  window.ClientSideValidations = ClientSideValidations;\n\n  if (!isAMD() && !isCommonJS()) {\n    ClientSideValidations.start();\n  }\n}\n\nfunction isAMD() {\n  return typeof define === 'function' && define.amd; // eslint-disable-line no-undef\n}\n\nfunction isCommonJS() {\n  return (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined'; // eslint-disable-line no-undef\n}\n\nexport default ClientSideValidations;","map":null,"metadata":{},"sourceType":"module"}